<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 학생정보 처리 SQL -->
<mapper namespace="student.dao.StudentMapper">

<!-- 학생 정보 저장 --> 
<!-- 파라미터 타입이 객체면 변수.get 함 -->
<insert id="insert" parameterType="student">
insert into student (
	id
	, name
	, kor
	, eng
	, mat
)
values (
	#{id}
	, #{name}
	, #{kor}
	, #{eng}
	, #{mat}
)
</insert>

<!-- 학생 전체 보기 -->
<select id="selectAll" resultType="student">
select 
	id
	, name
	, kor
	, eng
	, mat
	, (kor + eng + mat) as tot
	, ((kor + eng + mat)/3) as avg
 from
 	student
</select>

<!-- 성적순으로 출력 / 원하는 등수까지 출력 -->
<select id="listScore" parameterType = "int" resultType="student">
 select 
	*
 from
 	(select 
	id
	, name
	, kor
	, eng
	, mat
	, (kor + eng + mat) as tot
	, ((kor + eng + mat)/3) as avg
 from
 	student
 order by 
 	avg desc
 )
 where
	rownum &lt;= #{int} 
 
</select>

<!-- 이름순으로 출력 -->
<select id="listName" resultType="student">
select 
	id
	, name
	, kor
	, eng
	, mat
	, (kor + eng + mat) as tot
	, ((kor + eng + mat)/3) as avg
 from
 	student
 order by
 	name
</select>

<!-- 학번순으로 출력 -->
<select id="listId" resultType="student">
select 
	id
	, name
	, kor
	, eng
	, mat
	, (kor + eng + mat) as tot
	, ((kor + eng + mat)/3) as avg
 from
 	student
 order by
 	id
</select>



<!-- 학번으로 학생 정보 삭제 -->
<delete id="delete" parameterType="string">
delete from student where id = #{id}
</delete>

<!-- 학번으로 학생 정보 수정 -->
<update id="update" parameterType="student">
update student
set
	name = #{name}
	, kor = #{kor}
	, eng = #{eng}
	, mat = #{mat}
where
	id = #{id}
</update>

<!-- 이름으로 검색 -->
<select id="searchName" parameterType="string" resultType="student">
select *
from 
	student
where
	name = #{name}
</select>


<!-- 학번으로 검색 / 1명 학생 보기-->
<select id="searchId" parameterType="string" resultType="student">
select
	id
	, name
	, kor
	, eng
	, mat
	, (kor + eng + mat) as tot
	, ((kor + eng + mat)/3) as avg
from 
	student
where
	id = #{id}
</select>


<!-- 입력한 평균점수 이상인 사람 검색 -->
<select id="searchScore" parameterType="double" resultType="student">
select 
	id
	, name
	, kor
	, eng
	, mat
	, ((kor + eng + mat)/3) as avg
from 
	student
where
	((kor + eng + mat)/3) >= #{avg}
</select>

<!-- 입력한 2개의 평균점수 사이인 사람 검색 -->
<!-- parameterType은 hashmap 사용하거나 vo에 추가함/자주쓰는 값은 vo에 쓰고 그때그때 묶어서 보낼값은 hashmap 사용 -->
<!-- &lt;이 왼쪽괄호(<), &gt;는 오른쪽괄호(>) 로 써도 가능함. -->
<select id="searchScore2" parameterType="map" resultType="student">
<![CDATA[
select 
	id
	, name
	, kor
	, eng
	, mat
	, ((kor + eng + mat)/3) as avg
from 
	student
where
	((kor + eng + mat)/3) >= #{avg1} 
	and ((kor + eng + mat)/3) < #{avg2}
]]>
</select>

<!-- 입력한 2개의 평균점수 사이인 사람 검색/선생님 방식 약간 다름 -->
<select id="searchScore3" parameterType="map" resultType="student">
select 
	id
	, name
	, kor
	, eng
	, mat
	, ((kor + eng + mat)/3) as avg
from 
	student
where
	((kor + eng + mat)/3) between #{min} and #{max}
</select>


</mapper>


